name: Create Docker Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type (only used for main branch releases)'
        required: false
        default: 'patch'
        type: choice
        options:
        - major
        - minor  
        - patch

env:
  GIT_USER_NAME: GitHub Pipeline
  GIT_USER_EMAIL: github_pipeline@fairagro.net
  IMAGE_NAME: fairagro_advanced_middleware_api
  DOCKERHUB_NAMESPACE: zalf
  IMAGE_TITLE: FairAgro Advanced Middleware API
  IMAGE_DESCRIPTION: Advanced middleware API for FairAgro platform
  # Derived static variables
  GITVERSION_TAG_PREFIX: '.*-docker-v'
  DOCKER_PLATFORMS: linux/amd64
  SBOM_FORMAT: spdx-json
  # Conditional variables using expressions
  RELEASE_TYPE: ${{ contains(github.ref_name, 'feature/') && 'feature' || 'final' }}
  VERSION_INCREMENT: ${{ github.event.inputs.version_bump || 'patch' }}
  CREATE_GITHUB_RELEASE: ${{ !contains(github.ref_name, 'feature/') }}
  IS_FEATURE_BRANCH: ${{ startsWith(github.ref_name, 'feature/') }}

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ env.IS_FEATURE_BRANCH == 'true' && steps.gitversion.outputs.semVer || steps.gitversion.outputs.majorMinorPatch }}
      release-type: ${{ contains(github.ref_name, 'feature/') && 'feature' || 'final' }}
    env:
      # Job-specific environment variables  
      VERSION_INCREMENT: ${{ github.event.inputs.version_bump || 'patch' }}
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: gittools/actions/gitversion/setup@v4
        with:
          versionSpec: 6.4.x
          
      - name: Create GitVersion config
        uses: DamianReeves/write-file-action@master
        with:
          path: GitVersion.yml
          write-mode: overwrite
          contents: |
            mode: ContinuousDeployment
            tag-prefix: '${{ env.GITVERSION_TAG_PREFIX }}'
            semantic-version-format: Strict
            branches:
              main:
                label: ''
                increment: ${{ env.VERSION_INCREMENT }}
              feature:
                regex: ^feature/(?<BranchName>.+)$
                label: '{BranchName}'
                increment: Inherit
          
      - name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4
        
      - name: Debug version info
        run: |
          echo "Branch: ${{ github.ref_name }}"
          echo "Is feature branch: ${{ env.IS_FEATURE_BRANCH }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "Final version will be: ${{ env.IS_FEATURE_BRANCH == 'true' && steps.gitversion.outputs.semVer || steps.gitversion.outputs.majorMinorPatch }}"

  build-docker-image:
    needs: [calculate-version]
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write  # Required for SARIF upload
    
    env:
      DOCKERHUB_AVAILABLE: ${{ secrets.DOCKERHUB_USER != '' && secrets.DOCKERHUB_TOKEN != '' }}
      
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.build.outputs.tags }}
      dockerhub-pushed: ${{ env.DOCKERHUB_AVAILABLE }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Check DockerHub secrets
        run: |
          if [[ "${{ env.DOCKERHUB_AVAILABLE }}" == "true" ]]; then
            echo "‚úÖ DockerHub secrets are available"
          else
            echo "‚ö†Ô∏è DockerHub secrets not available - will only push to GitHub Container Registry"
          fi

      - name: Log in to DockerHub
        if: ${{ env.DOCKERHUB_AVAILABLE == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_AVAILABLE == 'true' && format('{0}/{1}', env.DOCKERHUB_NAMESPACE, env.IMAGE_NAME) || format('local/{0}', env.IMAGE_NAME) }}
          tags: |
            type=raw,value=${{ needs.calculate-version.outputs.version }}
            type=raw,value=latest,enable=${{ needs.calculate-version.outputs.release-type == 'final' }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_TITLE }}
            org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=v${{ needs.calculate-version.outputs.version }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.revision=${{ github.sha }}
            
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: ${{ env.DOCKERHUB_AVAILABLE == 'true' }}
          load: true
          tags: |
            local/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.version }}
            ${{ env.DOCKERHUB_AVAILABLE == 'true' && format('{0}/{1}:{2}', env.DOCKERHUB_NAMESPACE, env.IMAGE_NAME, needs.calculate-version.outputs.version) || '' }}
            ${{ (env.DOCKERHUB_AVAILABLE == 'true' && needs.calculate-version.outputs.release-type == 'final') && format('{0}/{1}:latest', env.DOCKERHUB_NAMESPACE, env.IMAGE_NAME) || '' }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VERSION=v${{ needs.calculate-version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Generate SBOM (final releases only)
        if: needs.calculate-version.outputs.release-type == 'final'
        uses: anchore/sbom-action@v0
        with:
          image: local/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.version }}
          output-file: sbom.spdx.json
          format: spdx-json
          
      - name: Upload SBOM artifact (final releases only)
        if: needs.calculate-version.outputs.release-type == 'final'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-v${{ needs.calculate-version.outputs.version }}
          path: sbom.spdx.json
          
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: local/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.version }}
          format: sarif
          output: trivy-results.sarif
          
      - uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

  create-release:
    needs: [calculate-version, build-docker-image]
    runs-on: ubuntu-latest
    if: needs.build-docker-image.result == 'success'
    
    permissions:
      contents: write
    
    env:
      TIMESTAMP: ${{ github.run_id }}${{ github.run_attempt }}
      RELEASE_TAG: ${{ github.run_id }}${{ github.run_attempt }}-docker-v${{ needs.calculate-version.outputs.version }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download SBOM artifact (final releases only)
        if: needs.calculate-version.outputs.release-type == 'final'
        uses: actions/download-artifact@v4
        with:
          name: sbom-v${{ needs.calculate-version.outputs.version }}
          
      - name: Create timestamp tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ env.RELEASE_TAG }}
          tag_prefix: ""
          
      - name: Log release info
        run: |
          # Only create GitHub release for final releases (main branch)
          if [[ "${{ needs.calculate-version.outputs.release-type }}" == "final" ]]; then
            echo "Creating GitHub release for final release"
          else
            echo "Feature release - Git tag created but no GitHub release"
          fi
          
      - name: Create GitHub Release (Draft)
        if: needs.calculate-version.outputs.release-type == 'final'
        id: draft_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: "docker-v${{ needs.calculate-version.outputs.version }}"
          body: |
            ## Docker Release v${{ needs.calculate-version.outputs.version }}

            **Docker Image**: ${{ needs.build-docker-image.outputs.dockerhub-pushed && format('{0}/{1}:{2}', env.DOCKERHUB_NAMESPACE, env.IMAGE_NAME, needs.calculate-version.outputs.version) || '‚ö†Ô∏è Not pushed to DockerHub (missing credentials)' }}
            
            - ‚úÖ Security scan completed (see Security tab)
            - ‚úÖ SBOM attached (sbom.spdx.json)
            - üê≥ Platform: linux/amd64
            
            ### Installation
            ```bash
            # Pull and run the Docker image
            docker pull ${{ needs.build-docker-image.outputs.dockerhub-pushed && format('{0}/{1}:{2}', env.DOCKERHUB_NAMESPACE, env.IMAGE_NAME, needs.calculate-version.outputs.version) || 'Image not available on DockerHub' }}
            ```
          files: |
            sbom.spdx.json
          draft: true
          make_latest: true
          generate_release_notes: true
          append_body: true
          fail_on_unmatched_files: true
          
      - name: Finalize Release
        if: needs.calculate-version.outputs.release-type == 'final'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Looking for draft release with tag: ${{ env.RELEASE_TAG }}"
          
          # Give GitHub API a moment to index the new release
          sleep 5
          
          # Try to get the release ID from the draft release we just created
          if RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/${{ env.RELEASE_TAG }} --jq '.id' 2>/dev/null); then
            echo "‚úÖ Found release ID via tag: $RELEASE_ID"
          else
            echo "‚ö†Ô∏è Release not found via tag, searching in all releases..."
            
            # Search for the release by version in all releases
            RELEASE_ID=$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.tag_name == "${{ env.RELEASE_TAG }}") | .id')
            
            if [[ -n "$RELEASE_ID" ]]; then
              echo "‚úÖ Found release ID via search: $RELEASE_ID"
            else
              echo "‚ùå Release not found at all!"
              exit 1
            fi
          fi
          
          # Convert draft to final release
          gh api repos/${{ github.repository }}/releases/$RELEASE_ID \
            --method PATCH \
            --field draft=false
          echo "üéâ Release finalized successfully"

  update-helm-chart:
    needs: [calculate-version, build-docker-image]
    runs-on: ubuntu-latest
    if: needs.build-docker-image.outputs.dockerhub-pushed == 'true'
    
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Update Chart.yaml appVersion
        run: |
          sed -i "s/^appVersion:.*/appVersion: \"${{ needs.calculate-version.outputs.version }}\"/" helm/Chart.yaml
          
      - name: Commit and push Chart.yaml changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(helm): update appVersion to ${{ needs.calculate-version.outputs.version }}"
          file_pattern: "helm/Chart.yaml"
          commit_user_name: "${{ env.GIT_USER_NAME }}"
          commit_user_email: "${{ env.GIT_USER_EMAIL }}"