name: Create Docker Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type (only used for main branch releases)'
        required: false
        default: 'patch'
        type: choice
        options:
        - major
        - minor  
        - patch

env:
  GIT_USER_NAME: GitHub Pipeline
  GIT_USER_EMAIL: github_pipeline@fairagro.net
  IMAGE_NAME: fairagro_advanced_middleware_api
  DOCKERHUB_NAMESPACE: zalf
  IMAGE_TITLE: FairAgro Advanced Middleware API
  IMAGE_DESCRIPTION: Advanced middleware API for FairAgro platform

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.set_version.outputs.version }}
      release-type: ${{ steps.configure.outputs.release-type }}
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: gittools/actions/gitversion/setup@v4
        with:
          versionSpec: 6.4.x
          
      - name: Configure GitVersion and calculate version
        id: configure
        run: |
          # Debug branch detection
          echo "Current branch: ${{ github.ref_name }}"
          
          # Determine increment and release type
          if [[ "${{ github.ref_name }}" == feature/* ]]; then
            INCREMENT="patch"
            RELEASE_TYPE="feature"
            echo "üåø Feature release - patch increment"
          else
            INCREMENT="${{ github.event.inputs.version_bump || 'patch' }}"
            RELEASE_TYPE="final"
            echo "üöÄ Final release - $INCREMENT increment"
          fi
          
          echo "Determined RELEASE_TYPE: $RELEASE_TYPE"
          
          # Create GitVersion config
          cat > GitVersion.yml << EOF
          mode: ContinuousDeployment
          tag-prefix: '.*-docker-v'
          semantic-version-format: Strict
          branches:
            main:
              label: ''
              increment: $INCREMENT
            feature:
              regex: ^feature/(?<BranchName>.+)$
              label: '{BranchName}'
              increment: Inherit
          EOF
          
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV
          echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          
      - name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4
        
      - name: Set final version
        id: set_version
        run: |
          if [[ "${{ github.ref_name }}" == feature/* ]]; then
            VERSION="${{ steps.gitversion.outputs.semVer }}"
          else
            VERSION="${{ steps.gitversion.outputs.majorMinorPatch }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Final version: v$VERSION"

  build-docker-image:
    needs: [calculate-version]
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write  # Required for SARIF upload
      
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.build.outputs.tags }}
      dockerhub-pushed: ${{ steps.dockerhub_secrets.outputs.available }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Check DockerHub secrets
        id: dockerhub_secrets
        run: |
          if [[ -n "${{ secrets.DOCKERHUB_USER }}" && -n "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then
            echo "available=true" >> $GITHUB_OUTPUT
            echo "‚úÖ DockerHub secrets are available"
          else
            echo "available=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è DockerHub secrets not available - will only push to GitHub Container Registry"
          fi

      - name: Log in to DockerHub
        if: steps.dockerhub_secrets.outputs.available == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.dockerhub_secrets.outputs.available == 'true' && format('{0}/{1}', env.DOCKERHUB_NAMESPACE, env.IMAGE_NAME) || format('local/{0}', env.IMAGE_NAME) }}
          tags: |
            type=raw,value=${{ needs.calculate-version.outputs.version }}
            type=raw,value=latest,enable=${{ needs.calculate-version.outputs.release-type == 'final' }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_TITLE }}
            org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=v${{ needs.calculate-version.outputs.version }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.revision=${{ github.sha }}
            
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: ${{ steps.dockerhub_secrets.outputs.available == 'true' }}
          load: true
          tags: |
            local/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.version }}
            ${{ steps.dockerhub_secrets.outputs.available == 'true' && format('{0}/{1}:{2}', env.DOCKERHUB_NAMESPACE, env.IMAGE_NAME, needs.calculate-version.outputs.version) || '' }}
            ${{ steps.dockerhub_secrets.outputs.available == 'true' && needs.calculate-version.outputs.release-type == 'final' && format('{0}/{1}:latest', env.DOCKERHUB_NAMESPACE, env.IMAGE_NAME) || '' }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VERSION=v${{ needs.calculate-version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - uses: anchore/sbom-action@v0
        with:
          image: local/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.version }}
          output-file: sbom.spdx.json
          format: spdx-json
          
      - uses: actions/upload-artifact@v4
        with:
          name: sbom-v${{ needs.calculate-version.outputs.version }}
          path: sbom.spdx.json
          
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: local/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.version }}
          format: sarif
          output: trivy-results.sarif
          
      - uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

  create-release:
    needs: [calculate-version, build-docker-image]
    runs-on: ubuntu-latest
    if: needs.build-docker-image.result == 'success'
    
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: actions/download-artifact@v4
        with:
          name: sbom-v${{ needs.calculate-version.outputs.version }}
          
      - name: Create timestamp tag and release
        id: create_tag
        run: |
          git config --local user.email "${{ env.GIT_USER_EMAIL }}"
          git config --local user.name "${{ env.GIT_USER_NAME }}"
          
          # Create timestamp tag (for chronological sorting and releases)
          RELEASE_TAG="$(date +%Y%m%d%H%M%S)-docker-v${{ needs.calculate-version.outputs.version }}"
          echo "release-tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          git tag "$RELEASE_TAG" && git push origin "$RELEASE_TAG" || echo "Release tag exists"
          
          # Only create GitHub release for final releases (main branch)
          if [[ "${{ needs.calculate-version.outputs.release-type }}" == "final" ]]; then
            echo "Creating GitHub release for final release"
          else
            echo "Feature release - Git tag created but no GitHub release"
          fi
          
      - name: Create GitHub Release
        if: needs.calculate-version.outputs.release-type == 'final'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.create_tag.outputs.release-tag }}
          name: "Docker Release v${{ needs.calculate-version.outputs.version }}"
          body: |
            ## Docker Release v${{ needs.calculate-version.outputs.version }}

            **Docker Image**: ${{ secrets.DOCKERHUB_USER && format('{0}/{1}:{2}', env.DOCKERHUB_NAMESPACE, env.IMAGE_NAME, needs.calculate-version.outputs.version) || 'Built locally' }}
            
            - ‚úÖ Security scan completed (see Security tab)
            - ‚úÖ SBOM attached
            - üê≥ Platform: linux/amd64
          files: sbom.spdx.json
          draft: true
          make_latest: true
          
      - name: Finalize Release
        if: needs.calculate-version.outputs.release-type == 'final'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.create_tag.outputs.release-tag }}
          draft: false
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-helm-chart:
    needs: [calculate-version, build-docker-image, create-release]
    runs-on: ubuntu-latest
    if: needs.create-release.result == 'success' && needs.build-docker-image.outputs.dockerhub-pushed == 'true'
    
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Update and commit Chart.yaml
        run: |
          sed -i "s/^appVersion:.*/appVersion: \"${{ needs.calculate-version.outputs.version }}\"/" helm/Chart.yaml
          
          git config --local user.email "${{ env.GIT_USER_EMAIL }}"
          git config --local user.name "${{ env.GIT_USER_NAME }}"
          
          git add helm/Chart.yaml
          git diff --staged --quiet || git commit -m "chore(helm): update appVersion to ${{ needs.calculate-version.outputs.version }}"
          git push