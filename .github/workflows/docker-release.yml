name: Create Docker Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type (only used for main branch releases)'
        required: false
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch

env:
  GIT_USER_NAME: GitHub Pipeline
  GIT_USER_EMAIL: github_pipeline@fairagro.net
  IMAGE_NAME: fairagro_advanced_middleware_api
  DOCKERHUB_NAMESPACE: zalf
  IMAGE_TITLE: FairAgro Advanced Middleware API
  IMAGE_DESCRIPTION: Advanced middleware API for FairAgro platform
  # Derived static variables
  GITVERSION_TAG_PREFIX: '.*-docker-v'
  DOCKER_PLATFORMS: linux/amd64
  SBOM_FORMAT: spdx-json
  # Conditional variables using expressions
  RELEASE_TYPE: ${{ contains(github.ref_name, 'feature/') && 'feature' || 'final' }}
  VERSION_INCREMENT: ${{ github.event.inputs.version_bump || 'patch' }}
  CREATE_GITHUB_RELEASE: ${{ !contains(github.ref_name, 'feature/') }}
  IS_FEATURE_BRANCH: ${{ startsWith(github.ref_name, 'feature/') }}

jobs:
  docker-build-and-test:
    uses: ./.github/workflows/docker-build.yml
    permissions:
      contents: read
      security-events: write  # Required for SARIF upload
    with:
      push_to_registry: true
      create_artifacts: true
      version_increment: ${{ github.event.inputs.version_bump || 'patch' }}
    secrets: inherit

  create-release:
    needs: [docker-build-and-test]
    runs-on: ubuntu-latest
    if: needs.docker-build-and-test.result == 'success'

    permissions:
      contents: write

    env:
      TIMESTAMP: ${{ github.run_id }}${{ github.run_attempt }}
      RELEASE_TAG: ${{ github.run_id }}${{ github.run_attempt }}-docker-v${{ needs.docker-build-and-test.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download SBOM artifact (final releases only)
        if: needs.docker-build-and-test.outputs.release-type == 'final'
        uses: actions/download-artifact@v4
        with:
          name: sbom-v${{ needs.docker-build-and-test.outputs.version }}

      - name: Create timestamp tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ env.RELEASE_TAG }}
          tag_prefix: ""

      - name: Log release info
        run: |
          # Only create GitHub release for final releases (main branch)
          if [[ "${{ needs.docker-build-and-test.outputs.release-type }}" == "final" ]]; then
            echo "Creating GitHub release for final release"
          else
            echo "Feature release - Git tag created but no GitHub release"
          fi

      - name: Create GitHub Release (Draft)
        if: needs.docker-build-and-test.outputs.release-type == 'final'
        id: draft_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: "docker-v${{ needs.docker-build-and-test.outputs.version }}"
          body: |
            ## Docker Release v${{ needs.docker-build-and-test.outputs.version }}

            **Docker Image**: ${{ needs.docker-build-and-test.outputs.dockerhub-pushed == 'true' && format('{0}/{1}:{2}', env.DOCKERHUB_NAMESPACE, env.IMAGE_NAME, needs.docker-build-and-test.outputs.version) || '‚ö†Ô∏è Not pushed to DockerHub (missing credentials)' }}
            **Image Digest**: `${{ needs.docker-build-and-test.outputs.image-digest }}`

            - ‚úÖ Security scan completed (see Security tab)
            - ‚úÖ SBOM attached (sbom.spdx.json)
            - üê≥ Platform: linux/amd64

            ### Installation
            ${{ needs.docker-build-and-test.outputs.dockerhub-pushed == 'true' && '```bash
            # Pull and run the Docker image
            docker pull ' || '‚ö†Ô∏è **Image not available on DockerHub** (missing credentials)

            The Docker image was built locally but not pushed to DockerHub.
            You can build it yourself:

            ```bash
            # Build the image locally
            git clone https://github.com/' }}${{ needs.docker-build-and-test.outputs.dockerhub-pushed == 'true' && format('{0}/{1}:{2}', env.DOCKERHUB_NAMESPACE, env.IMAGE_NAME, needs.docker-build-and-test.outputs.version) || format('{0}
            cd {1}
            git checkout {2}
            docker build -t local/{3}:{4} .', github.repository, github.repository, github.sha, env.IMAGE_NAME, needs.docker-build-and-test.outputs.version) }}
            ```
          files: |
            sbom.spdx.json
          draft: true
          make_latest: true
          generate_release_notes: true
          append_body: true
          fail_on_unmatched_files: true

      - name: Finalize Release
        if: needs.docker-build-and-test.outputs.release-type == 'final'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Looking for draft release with tag: ${{ env.RELEASE_TAG }}"

          # Give GitHub API a moment to index the new release
          sleep 5

          # Try to get the release ID from the draft release we just created
          if RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/${{ env.RELEASE_TAG }} --jq '.id' 2>/dev/null); then
            echo "‚úÖ Found release ID via tag: $RELEASE_ID"
          else
            echo "‚ö†Ô∏è Release not found via tag, searching in all releases..."

            # Search for the release by version in all releases
            RELEASE_ID=$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.tag_name == "${{ env.RELEASE_TAG }}") | .id')

            if [[ -n "$RELEASE_ID" ]]; then
              echo "‚úÖ Found release ID via search: $RELEASE_ID"
            else
              echo "‚ùå Release not found at all!"
              exit 1
            fi
          fi

          # Convert draft to final release
          gh api repos/${{ github.repository }}/releases/$RELEASE_ID \
            --method PATCH \
            --field draft=false
          echo "üéâ Release finalized successfully"

  update-helm-chart:
    needs: [docker-build-and-test]
    runs-on: ubuntu-latest
    if: needs.docker-build-and-test.outputs.dockerhub-pushed == 'true'

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update Chart.yaml appVersion
        run: |
          sed -i "s/^appVersion:.*/appVersion: \"${{ needs.docker-build-and-test.outputs.version }}\"/" helm/Chart.yaml

      - name: Commit and push Chart.yaml changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(helm): update appVersion to ${{ needs.docker-build-and-test.outputs.version }}"
          file_pattern: "helm/Chart.yaml"
          commit_user_name: "${{ env.GIT_USER_NAME }}"
          commit_user_email: "${{ env.GIT_USER_EMAIL }}"
