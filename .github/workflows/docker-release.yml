name: Create Docker Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type (only used for main branch releases)'
        required: false
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch

env:
  GIT_USER_NAME: GitHub Pipeline
  GIT_USER_EMAIL: github_pipeline@fairagro.net
  IMAGE_NAME: fairagro_advanced_middleware_api
  DOCKERHUB_NAMESPACE: zalf
  IMAGE_TITLE: FairAgro Advanced Middleware API
  IMAGE_DESCRIPTION: Advanced middleware API for FairAgro platform
  # Derived static variables
  GITVERSION_TAG_PREFIX: '.*-docker-v'
  DOCKER_PLATFORMS: linux/amd64
  SBOM_FORMAT: spdx-json
  # Conditional variables using expressions - SINGLE SOURCE OF TRUTH
  IS_FEATURE_BRANCH: ${{ startsWith(github.ref_name, 'feature/') }}
  IS_MAIN_BRANCH: ${{ github.ref_name == 'main' }}
  RELEASE_TYPE: ${{ startsWith(github.ref_name, 'feature/') && 'feature' || 'final' }}
  VERSION_INCREMENT: ${{ github.event.inputs.version_bump || 'patch' }}
  CREATE_GITHUB_RELEASE: ${{ github.ref_name == 'main' }}

jobs:
  docker-build-test:
    name: Docker Build and Test
    uses: ./.github/workflows/docker-build.yml
    with:
      push_to_registry: true
      save_image: true  # Save image for security scanning
      version_bump: ${{ startsWith(github.ref_name, 'feature/') && 'patch' || (github.event.inputs.version_bump || 'patch') }}
    secrets: inherit

  security-scan-release:
    needs: docker-build-test
    runs-on: ubuntu-latest
    if: needs.docker-build-test.result == 'success'
    
    permissions:
      contents: read
      security-events: write  # Required for SARIF upload
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ needs.docker-build-test.outputs.version }}

      - name: Load Docker image
        run: |
          docker load < docker-image.tar.gz
          echo "✅ Docker image loaded: local/${{ env.IMAGE_NAME }}:${{ needs.docker-build-test.outputs.version }}"
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: local/${{ env.IMAGE_NAME }}:${{ needs.docker-build-test.outputs.version }}
          output-file: sbom.spdx.json
          format: spdx-json
          
      - name: Generate CycloneDX SBOM
        uses: anchore/sbom-action@v0
        with:
          image: local/${{ env.IMAGE_NAME }}:${{ needs.docker-build-test.outputs.version }}
          output-file: sbom.cyclonedx.json
          format: cyclonedx-json
          
      - name: Analyze SBOM completeness
        run: |
          echo "## 📋 SBOM Analysis for Python/uv Application" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count different package types
          SPDX_PACKAGES=$(jq '.packages | length' sbom.spdx.json 2>/dev/null || echo "0")
          CYCLONE_COMPONENTS=$(jq '.components | length' sbom.cyclonedx.json 2>/dev/null || echo "0")
          
          echo "### 📊 Package Counts" >> $GITHUB_STEP_SUMMARY
          echo "- **SPDX Format**: $SPDX_PACKAGES packages" >> $GITHUB_STEP_SUMMARY
          echo "- **CycloneDX Format**: $CYCLONE_COMPONENTS components" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Analyze package types specifically for Python
          if [[ -f "sbom.spdx.json" ]]; then
            echo "### 🐍 Python Dependencies (Top 15)" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            jq -r '.packages[] | select(.name != null and (.name | test("python|py|flask|werkzeug|jinja|click"; "i"))) | "\(.name) (\(.versionInfo // "unknown"))"' sbom.spdx.json | head -15 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "### 📦 System Packages (Debian/APT)" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            jq -r '.packages[] | select(.name != null and (.name | test("lib|curl|apt|deb"; "i"))) | "\(.name) (\(.versionInfo // "unknown"))"' sbom.spdx.json | head -10 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # License analysis
            echo "### 📄 License Summary" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            jq -r '.packages[] | select(.licenseConcluded != null and .licenseConcluded != "NOASSERTION") | .licenseConcluded' sbom.spdx.json | sort | uniq -c | sort -nr | head -10 >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Check for uv specifically
            UV_FOUND=$(jq -r '.packages[] | select(.name != null and (.name | test("uv"; "i"))) | .name' sbom.spdx.json | wc -l)
            if [[ "$UV_FOUND" -gt 0 ]]; then
              echo "✅ **uv package manager detected in SBOM**" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **uv package manager not detected in SBOM** (expected limitation)" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 💡 SBOM Usage Tips" >> $GITHUB_STEP_SUMMARY
            echo "- **Vulnerability Scanning**: \`grype sbom.spdx.json\`" >> $GITHUB_STEP_SUMMARY
            echo "- **License Analysis**: \`scancode-toolkit sbom.spdx.json\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Supply Chain**: Use for SLSA compliance and audit requirements" >> $GITHUB_STEP_SUMMARY
            echo "- **Download**: Available as artifact and attached to this release" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Vulnerability scan with Grype
        run: |
          # Install Grype for SBOM vulnerability scanning
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Scan SBOM for vulnerabilities
          echo "## 🛡️ SBOM Vulnerability Scan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Generate both table output for summary and SARIF for GitHub Security
          if grype sbom.spdx.json -o table > grype-results.txt 2>&1; then
            # Generate SARIF output for GitHub Security tab
            grype sbom.spdx.json -o sarif > grype-results.sarif 2>/dev/null || echo "SARIF generation failed"
            
            echo "### 📊 Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -20 grype-results.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            # Count vulnerabilities by severity
            CRITICAL=$(grep -c "Critical" grype-results.txt || echo "0")
            HIGH=$(grep -c "High" grype-results.txt || echo "0") 
            MEDIUM=$(grep -c "Medium" grype-results.txt || echo "0")
            LOW=$(grep -c "Low" grype-results.txt || echo "0")
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🎯 Severity Breakdown" >> $GITHUB_STEP_SUMMARY
            echo "- 🔴 **Critical**: $CRITICAL" >> $GITHUB_STEP_SUMMARY
            echo "- 🟠 **High**: $HIGH" >> $GITHUB_STEP_SUMMARY  
            echo "- 🟡 **Medium**: $MEDIUM" >> $GITHUB_STEP_SUMMARY
            echo "- 🟢 **Low**: $LOW" >> $GITHUB_STEP_SUMMARY
            
            # Check if SARIF file was created
            if [[ -f "grype-results.sarif" ]]; then
              echo "- 📊 **SARIF Report**: Generated for GitHub Security tab" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ Grype scan failed or no vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Grype SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: grype-results.sarif
          category: grype-sbom-scan
        continue-on-error: true

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-v${{ needs.docker-build-test.outputs.version }}
          path: |
            sbom.spdx.json
            sbom.cyclonedx.json
            grype-results.txt
            grype-results.sarif
            trivy-sbom-results.sarif

      - name: Security scan with Trivy (Image)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: local/${{ env.IMAGE_NAME }}:${{ needs.docker-build-test.outputs.version }}
          format: sarif
          output: trivy-image-results.sarif

      - name: Security scan with Trivy (SBOM)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: sbom
          input: sbom.spdx.json
          format: sarif
          output: trivy-sbom-results.sarif
          scan-ref: sbom.spdx.json

      - name: Upload Trivy Image SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-image-results.sarif
          category: trivy-image-scan

      - name: Upload Trivy SBOM SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-sbom-results.sarif
          category: trivy-sbom-scan
        continue-on-error: true

  create-release:
    needs: [docker-build-test, security-scan-release]
    runs-on: ubuntu-latest
    if: needs.docker-build-test.result == 'success' && needs.security-scan-release.result == 'success' && !startsWith(github.ref_name, 'feature/')

    permissions:
      contents: write

    env:
      TIMESTAMP: ${{ github.run_id }}${{ github.run_attempt }}
      RELEASE_TAG: ${{ github.run_id }}${{ github.run_attempt }}-docker-v${{ needs.docker-build-test.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download SBOM artifact (final releases only)
        if: env.RELEASE_TYPE == 'final'
        uses: actions/download-artifact@v4
        with:
          name: sbom-v${{ needs.docker-build-test.outputs.version }}

      - name: Create timestamp tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ env.RELEASE_TAG }}
          tag_prefix: ""

      - name: Log release info
        run: |
          # Only create GitHub release for final releases (main branch)
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "Creating GitHub release for final release"
          else
            echo "Feature release - Git tag created but no GitHub release"
          fi

      - name: Create GitHub Release (Draft)
        if: env.RELEASE_TYPE == 'final'
        id: draft_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: "docker-v${{ needs.docker-build-test.outputs.version }}"
          body: |
            ## Docker Release v${{ needs.docker-build-test.outputs.version }}

            **Docker Image**: ${{ needs.docker-build-test.outputs.dockerhub-pushed == 'true' && format('{0}/{1}:{2}', env.DOCKERHUB_NAMESPACE, env.IMAGE_NAME, needs.docker-build-test.outputs.version) || '⚠️ Not pushed to DockerHub (missing credentials)' }}
            **Image Digest**: `${{ needs.docker-build-test.outputs.image-digest }}`

            - ✅ Security scan completed (see Security tab)
            - ✅ SBOM attached (sbom.spdx.json)
            - 🐳 Platform: linux/amd64

            ### Installation
            ${{ needs.docker-build-test.outputs.dockerhub-pushed == 'true' && '```bash
            # Pull and run the Docker image
            docker pull ' || '⚠️ **Image not available on DockerHub** (missing credentials)

            The Docker image was built locally but not pushed to DockerHub.
            You can build it yourself:

            ```bash
            # Build the image locally
            git clone https://github.com/' }}${{ needs.docker-build-test.outputs.dockerhub-pushed == 'true' && format('{0}/{1}:{2}', env.DOCKERHUB_NAMESPACE, env.IMAGE_NAME, needs.docker-build-test.outputs.version) || format('{0}
            cd {1}
            git checkout {2}
            docker build -t local/{3}:{4} .', github.repository, github.repository, github.sha, env.IMAGE_NAME, needs.docker-build-test.outputs.version) }}
            ```
          files: |
            sbom.spdx.json
            sbom.cyclonedx.json
          draft: true
          make_latest: true
          generate_release_notes: true
          append_body: true
          fail_on_unmatched_files: true

      - name: Finalize Release
        if: env.RELEASE_TYPE == 'final'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Looking for draft release with tag: ${{ env.RELEASE_TAG }}"

          # Give GitHub API a moment to index the new release
          sleep 5

          # Try to get the release ID from the draft release we just created
          if RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/${{ env.RELEASE_TAG }} --jq '.id' 2>/dev/null); then
            echo "✅ Found release ID via tag: $RELEASE_ID"
          else
            echo "⚠️ Release not found via tag, searching in all releases..."

            # Search for the release by version in all releases
            RELEASE_ID=$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.tag_name == "${{ env.RELEASE_TAG }}") | .id')

            if [[ -n "$RELEASE_ID" ]]; then
              echo "✅ Found release ID via search: $RELEASE_ID"
            else
              echo "❌ Release not found at all!"
              exit 1
            fi
          fi

          # Convert draft to final release
          gh api repos/${{ github.repository }}/releases/$RELEASE_ID \
            --method PATCH \
            --field draft=false
          echo "🎉 Release finalized successfully"

  update-helm-chart:
    needs: [docker-build-test, security-scan-release]
    runs-on: ubuntu-latest
    if: needs.docker-build-test.outputs.dockerhub-pushed == 'true' && needs.security-scan-release.result == 'success'

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update Chart.yaml appVersion
        run: |
          sed -i "s/^appVersion:.*/appVersion: \"${{ needs.docker-build-test.outputs.version }}\"/" helm/Chart.yaml

      - name: Commit and push Chart.yaml changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(helm): update appVersion to ${{ needs.docker-build-test.outputs.version }}"
          file_pattern: "helm/Chart.yaml"
          commit_user_name: "${{ env.GIT_USER_NAME }}"
          commit_user_email: "${{ env.GIT_USER_EMAIL }}"
