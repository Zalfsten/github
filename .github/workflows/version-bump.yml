name: Version Bump and Release

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  version-bump:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: read
    
    outputs:
      version: ${{ steps.gitversion.outputs.majorMinorPatch }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4
        with:
          versionSpec: '6.x'
          
      - name: Determine version increment
        id: version_increment
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "increment=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
          else
            # Check PR labels for version increment
            if ${{ contains(github.event.pull_request.labels.*.name, 'major version') }}; then
              echo "increment=major" >> $GITHUB_OUTPUT
            elif ${{ contains(github.event.pull_request.labels.*.name, 'minor version') }}; then
              echo "increment=minor" >> $GITHUB_OUTPUT
            elif ${{ contains(github.event.pull_request.labels.*.name, 'patch version') }}; then
              echo "increment=patch" >> $GITHUB_OUTPUT
            else
              echo "increment=patch" >> $GITHUB_OUTPUT
            fi
          fi
          
      - name: Create GitVersion.yml configuration
        run: |
          # Bestimme die nächste Version basierend auf dem letzten Tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LAST_VERSION=${LAST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_VERSION"
          
          case "${{ steps.version_increment.outputs.increment }}" in
            major)
              NEXT_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEXT_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEXT_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac
          
          echo "Last tag: $LAST_TAG"
          echo "Next version will be: $NEXT_VERSION"
          
          cat > GitVersion.yml << EOF
          next-version: $NEXT_VERSION
          branches:
            main:
              increment: None
              prevent-increment:
                of-merged-branch: false
              track-merge-target: false
              source-branches: ['feature']
              label: ''
            feature:
              regex: ^feature/(?<BranchName>.+)$
              label: "{BranchName}"
              increment: Inherit
              source-branches: ['main']
              track-merge-target: false
          ignore:
            sha: []
          EOF
          
      - name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4
        
      - name: Display GitVersion outputs
        run: |
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "Selected increment: ${{ steps.version_increment.outputs.increment }}"
          echo "Will use for release: v${{ steps.gitversion.outputs.majorMinorPatch }}"
          
      - name: Create and push tag
        uses: actions/github-script@v7
        with:
          script: |
            const tag = `v${{ steps.gitversion.outputs.majorMinorPatch }}`;
            const sha = context.sha;
            
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tag}`,
                sha: sha
              });
              console.log(`✅ Tag ${tag} created successfully`);
            } catch (error) {
              if (error.status === 422) {
                console.log(`⚠️ Tag ${tag} already exists`);
              } else {
                throw error;
              }
            }
          
  create-release:
    needs: version-bump
    runs-on: ubuntu-latest
    if: needs.version-bump.outputs.version != ''
    
    permissions:
      contents: write
      pull-requests: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version-bump.outputs.version }}
          name: Release v${{ needs.version-bump.outputs.version }}
          body: |
            ## Changes in this release
            
            ${{ github.event.pull_request.title || 'Manual release' }}
            
            ### Pull Request
            ${{ github.event.pull_request.html_url || 'Manual trigger' }}
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.version-bump.outputs.version }}...HEAD
          draft: false
          prerelease: false