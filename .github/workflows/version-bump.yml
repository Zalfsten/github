name: Version Bump and Release

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

jobs:
  version-bump:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: read
    
    outputs:
      version: ${{ steps.determine_output_version.outputs.version }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4
        with:
          versionSpec: '6.x'
          
      - name: Determine version increment
        id: version_increment
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Bei manual dispatch auf feature branch immer patch
            echo "increment=patch" >> $GITHUB_OUTPUT
          else
            # Check PR labels for version increment
            if ${{ contains(github.event.pull_request.labels.*.name, 'major version') }}; then
              echo "increment=major" >> $GITHUB_OUTPUT
            elif ${{ contains(github.event.pull_request.labels.*.name, 'minor version') }}; then
              echo "increment=minor" >> $GITHUB_OUTPUT
            elif ${{ contains(github.event.pull_request.labels.*.name, 'patch version') }}; then
              echo "increment=patch" >> $GITHUB_OUTPUT
            else
              echo "increment=patch" >> $GITHUB_OUTPUT
            fi
          fi
          
      - name: Create GitVersion.yml configuration
        run: |
          # Bestimme die nächste Version basierend auf dem letzten Tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LAST_VERSION=${LAST_TAG#v}
          
          echo "Last tag: $LAST_TAG"
          echo "Last version: $LAST_VERSION"
          echo "Current branch: ${{ github.ref_name }}"
          echo "Event name: ${{ github.event_name }}"
          
          # Parse version parts with proper error handling
          if [[ "$LAST_VERSION" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
          else
            echo "Invalid version format: $LAST_VERSION, using 0.0.0"
            MAJOR=0
            MINOR=0
            PATCH=0
          fi
          
          echo "Parsed - Major: $MAJOR, Minor: $MINOR, Patch: $PATCH"
          
          # Berechne nächste Version basierend auf increment type
          echo "Increment type: ${{ steps.version_increment.outputs.increment }}"
          
          case "${{ steps.version_increment.outputs.increment }}" in
            major)
              NEXT_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEXT_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEXT_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
            *)
              echo "Unknown increment type, defaulting to patch"
              NEXT_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac
          
          echo "Next version will be: $NEXT_VERSION"
          
          # Unterscheide zwischen PR-Merge und Manual auf Feature-Branch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.ref_name }}" == feature/* ]]; then
            # Manual trigger auf Feature-Branch - immer nächste Patch-Version als Basis
            echo "Manual trigger on feature branch detected"
            BRANCH_NAME="${{ github.ref_name }}"
            FEATURE_NAME=${BRANCH_NAME#feature/}
            
            # Für Feature-Branch: immer nächste Patch-Version als Basis
            NEXT_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            
            echo "Feature name: $FEATURE_NAME"
            echo "Base version for feature: $NEXT_VERSION"
            
            cat > GitVersion.yml << EOF
          next-version: $NEXT_VERSION
          branches:
            main:
              increment: None
              prevent-increment:
                of-merged-branch: false
              track-merge-target: false
              source-branches: ['feature']
              label: ''
            feature:
              regex: ^feature/(?<BranchName>.+)$
              label: "{BranchName}"
              increment: Patch
              source-branches: ['main']
              track-merge-target: false
          ignore:
            sha: []
          EOF
          else
            # PR-Merge auf main oder Manual auf main
            echo "PR merge or main branch trigger detected"
            
            cat > GitVersion.yml << EOF
          next-version: $NEXT_VERSION
          branches:
            main:
              increment: None
              prevent-increment:
                of-merged-branch: false
              track-merge-target: false
              source-branches: ['feature']
              label: ''
            feature:
              regex: ^feature/(?<BranchName>.+)$
              label: "{BranchName}"
              increment: Inherit
              source-branches: ['main']
              track-merge-target: false
          ignore:
            sha: []
          EOF
          fi
          
          echo "Generated GitVersion.yml:"
          cat GitVersion.yml
          
      - name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4
        
      - name: Display GitVersion outputs
        run: |
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "Selected increment: ${{ steps.version_increment.outputs.increment }}"
          
      - name: Determine output version
        id: determine_output_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.ref_name }}" == feature/* ]]; then
            # Feature branch: use semVer for pre-release tags like v1.0.1-foo.1
            VERSION="${{ steps.gitversion.outputs.semVer }}"
            echo "Using semVer for feature branch: $VERSION"
          else
            # Main branch (PR merge or manual): use majorMinorPatch for clean releases like v1.0.0
            VERSION="${{ steps.gitversion.outputs.majorMinorPatch }}"
            echo "Using majorMinorPatch for main branch: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Will use for release: v$VERSION"
          
      - name: Create and push tag
        uses: actions/github-script@v7
        with:
          script: |
            const tag = `v${{ steps.determine_output_version.outputs.version }}`;
            const sha = context.sha;
            
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tag}`,
                sha: sha
              });
              console.log(`✅ Tag ${tag} created successfully`);
            } catch (error) {
              if (error.status === 422) {
                console.log(`⚠️ Tag ${tag} already exists`);
              } else {
                throw error;
              }
            }
          
  create-release:
    needs: version-bump
    runs-on: ubuntu-latest
    if: needs.version-bump.outputs.version != '' && (github.event.pull_request.merged == true || (github.event_name == 'workflow_dispatch' && github.ref_name == 'main'))
    
    permissions:
      contents: write
      pull-requests: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version-bump.outputs.version }}
          name: Release v${{ needs.version-bump.outputs.version }}
          body: |
            ## Changes in this release
            
            ${{ github.event.pull_request.title || 'Manual release' }}
            
            ### Pull Request
            ${{ github.event.pull_request.html_url || 'Manual trigger' }}
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.version-bump.outputs.version }}...HEAD
          draft: false
          prerelease: false