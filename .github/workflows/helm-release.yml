name: Create Helm Chart Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type for Helm chart release'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor  
        - patch

env:
  GIT_USER_NAME: GitHub Pipeline
  GIT_USER_EMAIL: github_pipeline@fairagro.net
  DOCKERHUB_NAMESPACE: zalf
  IMAGE_NAME: fairagro_advanced_middleware_api

jobs:
  helm-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: gittools/actions/gitversion/setup@v4
        with:
          versionSpec: '6.x'
          
      - name: Configure GitVersion and calculate version
        id: configure
        run: |
          # Determine increment and release type
          if [[ "${{ github.ref_name }}" == feature/* ]]; then
            INCREMENT="patch"
            RELEASE_TYPE="feature"
            echo "üåø Helm feature release"
          else
            INCREMENT="${{ github.event.inputs.version_bump }}"
            RELEASE_TYPE="final"
            echo "üöÄ Helm final release - $INCREMENT increment"
          fi
          
          # Create GitVersion config
          cat > GitVersion.yml << EOF
          mode: ContinuousDeployment
          tag-prefix: '.*-chart-v'
          semantic-version-format: Strict
          branches:
            main:
              label: ''
              increment: $INCREMENT
            feature:
              regex: ^feature/(?<BranchName>.+)$
              label: '{BranchName}'
              increment: Inherit
          EOF
          
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV
          echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          
      - uses: gittools/actions/gitversion/execute@v4
        id: gitversion
        
      - uses: azure/setup-helm@v4
        with:
          version: '3.14.0'
          
      - name: Create Helm release
        id: create_tag
        run: |
          # Determine version
          if [[ "${{ github.ref_name }}" == feature/* ]]; then
            VERSION="${{ steps.gitversion.outputs.SemVer }}"
          else
            VERSION="${{ steps.gitversion.outputs.MajorMinorPatch }}"
          fi
          
          # Extract appVersion
          APP_VERSION=$(grep '^appVersion:' helm/Chart.yaml | sed 's/appVersion: *"*\([^"]*\)"*/\1/')
          
          # Create timestamp tag (always for all releases)
          RELEASE_TAG="$(date +%Y%m%d%H%M%S)-chart-v$VERSION"
          echo "release-tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "chart-version=$VERSION" >> $GITHUB_OUTPUT
          echo "app-version=$APP_VERSION" >> $GITHUB_OUTPUT
          
          git config --local user.email "${{ env.GIT_USER_EMAIL }}"
          git config --local user.name "${{ env.GIT_USER_NAME }}"
          git tag "$RELEASE_TAG" && git push origin "$RELEASE_TAG" || echo "Release tag exists"
          
          # Package Helm chart
          helm package ./helm --version "$VERSION" --app-version "$APP_VERSION"
          
          # Only create GitHub release for final releases (main branch)
          if [[ "$RELEASE_TYPE" == "final" ]]; then
            echo "Creating GitHub release for final Helm release"
          else
            echo "Feature release - Git tag created but no GitHub release"
          fi
          
      - name: Create GitHub Release (Draft)
        if: steps.configure.outputs.release-type == 'final'
        id: draft_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.create_tag.outputs.release-tag }}
          name: "chart-v${{ steps.create_tag.outputs.chart-version }}"
          body: |
            ## Helm Chart Release v${{ steps.create_tag.outputs.chart-version }}
            
            **Chart Version**: ${{ steps.create_tag.outputs.chart-version }}  
            **App Version**: ${{ steps.create_tag.outputs.app-version }}
            
            ```bash
            helm upgrade --install fairagro-middleware ./helm \
              --set image.tag=${{ steps.create_tag.outputs.app-version }} \
              --set image.repository=${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}
            ```
          files: ${{ env.IMAGE_NAME }}-${{ steps.create_tag.outputs.chart-version }}.tgz
          draft: true
          make_latest: true
          generate_release_notes: true
          append_body: true
          
      - name: Finalize Release
        if: steps.configure.outputs.release-type == 'final'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the release ID from the draft release we just created
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/${{ steps.create_tag.outputs.release-tag }} --jq '.id')
          
          # Convert draft to final release
          gh api repos/${{ github.repository }}/releases/$RELEASE_ID \
            --method PATCH \
            --field draft=false
          
      - name: Push to DockerHub
        if: always()
        run: |
          # Check if we should push based on release type
          if [[ "$RELEASE_TYPE" != "final" && "$RELEASE_TYPE" != "feature" ]]; then
            echo "‚è≠Ô∏è Skipping DockerHub push - not a final or feature release"
            exit 0
          fi
          if [[ -n "${{ secrets.DOCKERHUB_USER }}" && -n "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then
            VERSION="${{ steps.gitversion.outputs.semVer }}"
            [[ "${{ github.ref_name }}" != feature/* ]] && VERSION="${{ steps.gitversion.outputs.majorMinorPatch }}"
            
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | helm registry login registry-1.docker.io -u ${{ secrets.DOCKERHUB_USER }} --password-stdin
            helm push "${{ env.IMAGE_NAME }}-$VERSION.tgz" oci://registry-1.docker.io/${{ env.DOCKERHUB_NAMESPACE }}
            echo "‚úÖ Pushed to DockerHub: ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:$VERSION"
          else
            echo "‚ö†Ô∏è Skipping DockerHub push - missing secrets"
          fi
