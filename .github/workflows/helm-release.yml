name: Create Helm Chart Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type for Helm chart release'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch

env:
  GIT_USER_NAME: ${{ vars.GIT_USER_NAME || 'GitHub Pipeline' }}
  GIT_USER_EMAIL: ${{ vars.GIT_USER_EMAIL || 'github_pipeline@fairagro.net' }}
  DOCKERHUB_NAMESPACE: ${{ vars.DOCKERHUB_NAMESPACE || 'zalf' }}
  IMAGE_NAME: ${{ vars.IMAGE_NAME || 'fairagro_advanced_middleware_api' }}
  GITVERSION_TAG_PREFIX: ${{ vars.GITVERSION_TAG_PREFIX || '.*-(chart|helm)-v' }}  # Support both old and new tag patterns

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ env.IS_FEATURE_BRANCH == 'true' && steps.gitversion.outputs.semVer || steps.gitversion.outputs.majorMinorPatch }}
    env:
      IS_FEATURE_BRANCH: ${{ startsWith(github.ref_name, 'feature/') }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: gittools/actions/gitversion/setup@v4
        with:
          versionSpec: '6.4.x'

      - name: Create GitVersion config
        uses: DamianReeves/write-file-action@master
        with:
          path: GitVersion.yml
          write-mode: overwrite
          contents: |
            mode: ContinuousDeployment
            tag-prefix: '${{ env.GITVERSION_TAG_PREFIX }}'
            semantic-version-format: Strict
            branches:
              main:
                label: ''
                increment: patch
              feature:
                regex: ^feature/(?<BranchName>.+)$
                label: '{BranchName}'
                increment: Inherit
                track-merge-target: false

      - name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4

      - name: Debug version info
        run: |
          echo "üîß Helm Version Configuration:"
          echo "  - Branch: ${{ github.ref_name }}"
          echo "  - Is feature branch: ${{ env.IS_FEATURE_BRANCH }}"
          echo ""
          echo "üìä GitVersion Results:"
          echo "  - SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "  - MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "  - Final version: ${{ env.IS_FEATURE_BRANCH == 'true' && steps.gitversion.outputs.semVer || steps.gitversion.outputs.majorMinorPatch }}"

  helm-release:
    needs: calculate-version
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      TIMESTAMP: ${{ github.run_id }}${{ github.run_attempt }}
      RELEASE_TAG: ${{ github.run_id }}${{ github.run_attempt }}-helm-v${{ needs.calculate-version.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Extract app version
        id: prepare_release
        env:
          CHART_VERSION: ${{ needs.calculate-version.outputs.version }}
        run: |
          # Extract appVersion from Chart.yaml
          APP_VERSION=$(grep '^appVersion:' helm/Chart.yaml | sed 's/appVersion: *"*\([^"]*\)"*/\1/')
          
          # Set outputs for later steps
          echo "release-tag=${{ env.RELEASE_TAG }}" >> $GITHUB_OUTPUT
          echo "chart-version=$CHART_VERSION" >> $GITHUB_OUTPUT
          echo "app-version=$APP_VERSION" >> $GITHUB_OUTPUT
          
          echo "üìã Release prepared:"
          echo "  - Release tag: ${{ env.RELEASE_TAG }}"
          echo "  - Chart version: $CHART_VERSION"
          echo "  - App version: $APP_VERSION"

      - name: Create version tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ env.RELEASE_TAG }}
          tag_prefix: ""

      - name: Package Helm chart
        id: package_chart
        run: |
          VERSION="${{ steps.prepare_release.outputs.chart-version }}"
          APP_VERSION="${{ steps.prepare_release.outputs.app-version }}"
          
          # Package Helm chart
          helm package ./helm --version "$VERSION" --app-version "$APP_VERSION"

          # Find the actual chart package name (helm package creates name based on Chart.yaml)
          CHART_PACKAGE=$(ls *.tgz | head -1)
          echo "chart-package=$CHART_PACKAGE" >> $GITHUB_OUTPUT
          echo "üì¶ Created Helm chart package: $CHART_PACKAGE"

      - name: Log release info
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "Creating GitHub release for final Helm release"
            echo "‚úÖ Git tag: ${{ env.RELEASE_TAG }}"
            echo "‚úÖ GitHub release: Will be created"
          else
            echo "Feature branch release - tracking version progression"
            echo "‚úÖ Git tag: ${{ env.RELEASE_TAG }} (for GitVersion tracking)"
            echo "‚è≠Ô∏è GitHub release: Skipped (feature branch)"
          fi

      - name: Create GitHub Release (Draft)
        if: github.ref_name == 'main'
        id: draft_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: "chart-v${{ steps.prepare_release.outputs.chart-version }}"
          body: |
            ## Helm Chart Release v${{ steps.prepare_release.outputs.chart-version }}

            **Chart Version**: ${{ steps.prepare_release.outputs.chart-version }}
            **App Version**: ${{ steps.prepare_release.outputs.app-version }}

            ```bash
            helm upgrade --install fairagro-middleware ./helm \
              --set image.tag=${{ steps.prepare_release.outputs.app-version }} \
              --set image.repository=${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}
            ```
          files: ${{ steps.package_chart.outputs.chart-package }}
          draft: true
          make_latest: true
          generate_release_notes: true
          append_body: true

      - name: Finalize Release
        if: github.ref_name == 'main'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Looking for draft release with tag: ${{ env.RELEASE_TAG }}"

          # Give GitHub API a moment to index the new release
          sleep 5

          # Try to get the release ID from the draft release we just created
          if RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/${{ env.RELEASE_TAG }} --jq '.id' 2>/dev/null); then
            echo "‚úÖ Found release ID via tag: $RELEASE_ID"
          else
            echo "‚ö†Ô∏è Release not found via tag, searching in all releases..."

            # Search for the release by version in all releases
            RELEASE_ID=$(gh api repos/${{ github.repository }}/releases --jq '.[] | select(.tag_name == "${{ env.RELEASE_TAG }}") | .id')

            if [[ -n "$RELEASE_ID" ]]; then
              echo "‚úÖ Found release ID via search: $RELEASE_ID"
            else
              echo "‚ùå Release not found at all!"
              exit 1
            fi
          fi

          # Convert draft to final release
          gh api repos/${{ github.repository }}/releases/$RELEASE_ID \
            --method PATCH \
            --field draft=false
          echo "üéâ Release finalized successfully"

      - name: Push to DockerHub
        if: always()
        run: |
          # Check if we should push based on release type
          if [[ "$RELEASE_TYPE" != "final" && "$RELEASE_TYPE" != "feature" ]]; then
            echo "‚è≠Ô∏è Skipping DockerHub push - not a final or feature release"
            exit 0
          fi
          if [[ -n "${{ secrets.DOCKERHUB_USER }}" && -n "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then
            VERSION="${{ needs.calculate-version.outputs.version }}"

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | helm registry login registry-1.docker.io -u ${{ secrets.DOCKERHUB_USER }} --password-stdin
            helm push "${{ env.IMAGE_NAME }}-$VERSION.tgz" oci://registry-1.docker.io/${{ env.DOCKERHUB_NAMESPACE }}
            echo "‚úÖ Pushed to DockerHub: ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:$VERSION"
          else
            echo "‚ö†Ô∏è Skipping DockerHub push - missing secrets"
          fi
