name: Create Helm Chart Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type for Helm chart release'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor  
        - patch

env:
  DOCKERHUB_NAMESPACE: zalf
  IMAGE_NAME: fairagro_advanced_middleware_api

jobs:
  helm-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: gittools/actions/gitversion/setup@v4
        with:
          versionSpec: '6.x'
          
      - name: Configure GitVersion and calculate version
        run: |
          # Determine increment and release type
          if [[ "${{ github.ref_name }}" == feature/* ]]; then
            INCREMENT="patch"
            RELEASE_TYPE="feature"
            echo "üåø Helm feature release"
          else
            INCREMENT="${{ github.event.inputs.version_bump }}"
            RELEASE_TYPE="final"
            echo "üöÄ Helm final release - $INCREMENT increment"
          fi
          
          # Create GitVersion config
          cat > GitVersion.yml << EOF
          tag-prefix: chart-v
          mode: ContinuousDeployment
          branches:
            main:
              label: ''
              increment: $INCREMENT
            feature:
              regex: ^feature/(?<BranchName>.+)$
              label: '{BranchName}'
              increment: Inherit
          EOF
          
          echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV
          
      - uses: gittools/actions/gitversion/execute@v4
        id: gitversion
        
      - uses: azure/setup-helm@v4
        with:
          version: '3.14.0'
          
      - name: Create Helm release
        if: env.RELEASE_TYPE == 'final' && github.ref_name == 'main'
        run: |
          # Determine version
          if [[ "${{ github.ref_name }}" == feature/* ]]; then
            VERSION="${{ steps.gitversion.outputs.semVer }}"
          else
            VERSION="${{ steps.gitversion.outputs.majorMinorPatch }}"
          fi
          
          # Extract appVersion
          APP_VERSION=$(grep '^appVersion:' helm/Chart.yaml | sed 's/appVersion: *"*\([^"]*\)"*/\1/')
          
          # Create timestamp tag
          RELEASE_TAG="$(date +%Y%m%d%H%M%S)-chart-v$VERSION"
          git config --local user.email "${{ env.GIT_USER_EMAIL }}"
          git config --local user.name "${{ env.GIT_USER_NAME }}"
          git tag "$RELEASE_TAG" && git push origin "$RELEASE_TAG" || echo "Tag exists"
          
          # Package Helm chart
          helm package ./helm --version "$VERSION" --app-version "$APP_VERSION"
          
      - name: Create Helm Chart GitHub Release
        if: needs.calculate-helm-version.outputs.release-type == 'final' && github.ref_name == 'main'
        run: |
          # Check if release already exists
          RELEASE_TAG="${{ steps.create_tags.outputs.release_tag }}"
          
          if gh release view "$RELEASE_TAG" --json isDraft --jq '.isDraft' 2>/dev/null | grep -q true; then
            echo "Draft release exists, updating it"
          elif gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
            echo "Final release already exists, skipping creation"
            exit 0
          fi
          
          # Create or update draft release
          gh release create "$RELEASE_TAG" ${{ env.IMAGE_NAME }}-${{ needs.calculate-helm-version.outputs.version }}.tgz \
            --title "Helm Chart Release v${{ needs.calculate-helm-version.outputs.version }}" \
            --notes "## Helm Chart Release chart-v${{ needs.calculate-helm-version.outputs.version }}
            
            This is a **${{ needs.calculate-helm-version.outputs.release-type }}** Helm chart release triggered manually.
            
            ### Version Increment
            - **Type**: ${{ github.event.inputs.version_bump || 'patch (feature)' }}
            - **Branch**: ${{ github.ref_name }}
            - **Chart Version**: \`${{ needs.calculate-helm-version.outputs.version }}\`
            
            ### Current Chart Details
            
            Based on the current \`helm/Chart.yaml\`:
            - **Chart Version**: \`${{ needs.calculate-helm-version.outputs.version }}\`
            - **App Version**: \`${{ steps.extract_app_version.outputs.app_version }}\`
            
            ### Installation
            \`\`\`bash
            helm upgrade --install fairagro-middleware ./helm \\
              --set image.tag=${{ steps.extract_app_version.outputs.app_version }} \\
              --set image.repository=${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}
            \`\`\`
            
            ### Helm Package
            \`\`\`bash
            helm package ./helm --version ${{ needs.calculate-helm-version.outputs.version }}
            \`\`\`
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/chart-v${{ needs.calculate-helm-version.outputs.version }}...HEAD" \
            --draft --latest || echo "Release creation/update completed"
            
          # Finalize the draft release (makes it immutable if GitHub setting is enabled)
          echo "Finalizing draft release..."
          gh release edit "$RELEASE_TAG" --draft=false
          echo "‚úÖ Release published and finalized"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  push-helm-chart:
    needs: [calculate-helm-version, create-helm-tag-and-release]
    runs-on: ubuntu-latest
    if: needs.create-helm-tag-and-release.result == 'success'
    
    permissions:
      contents: read
      
    outputs:
      chart-pushed: ${{ steps.dockerhub_secrets.outputs.available }}
      chart-push-skipped: ${{ steps.dockerhub_secrets.outputs.available == 'false' }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check DockerHub secrets
        id: dockerhub_secrets
        run: |
          if [[ -n "${{ secrets.DOCKERHUB_USER }}" && -n "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then
            VERSION="${{ steps.gitversion.outputs.semVer }}"
            [[ "${{ github.ref_name }}" != feature/* ]] && VERSION="${{ steps.gitversion.outputs.majorMinorPatch }}"
            
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | helm registry login registry-1.docker.io -u ${{ secrets.DOCKERHUB_USER }} --password-stdin
            helm push "${{ env.IMAGE_NAME }}-$VERSION.tgz" oci://registry-1.docker.io/${{ env.DOCKERHUB_NAMESPACE }}
            echo "‚úÖ Pushed to DockerHub: ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:$VERSION"
          else
            echo "‚ö†Ô∏è Skipping DockerHub push - missing secrets"
          fi
